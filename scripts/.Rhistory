crab_tab <- as.table(crab.files, rep(NA, times = length(crab.files)))
crab_tab <- as.data.frame(crab.files, rep(NA, times = length(crab.files)))
View(crab_tab)
View(crab_tab)
ep(NA, times = length(crab.files))
rep(NA, times = length(crab.files))
crab_tab <- as.data.frame(crab.files, rep(NA, times = length(crab.files)))
crab_tab <- matrix(crab.files, rep(NA, times = length(crab.files)))
crab_tab <- as.data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
View(crab_tab)
strsplit(crab_tab, split = "Crab_")
strsplit(crab_tab$crabs, split = "Crab_")
crabtab$crabs <- unlist(strsplit(crab_tab$crabs, split = "Crab_"))[2]
crab_tab$crabs <- unlist(strsplit(crab_tab$crabs, split = "Crab_"))[2]
View(crab_tab)
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
unlist(strsplit(crab_tab$crabs, split = "Crab_"))[2]
unlist(strsplit(crab_tab$crabs, split = "Crab_"))
strsplit(crab_tab$crabs, split = "Crab_")
?str_remove
crab_tab %>%
str_remove("../output/TPM_counts/cbai_transcriptomev2.0/")
View(crab_tab)
crab_tab %>%
str_remove(crabs, "../output/TPM_counts/cbai_transcriptomev2.0/")
crab_tab$crabs <- sub("^*Crab_", "", as.character(crab_tab$crabs))
View(crab_tab)
crab_tab$crabs <- sub("^*Crab_", "", as.character(crab_tab$crabs))
View(crab_tab)
crab_tab$crabs <- gsub("^*Crab_", "", as.character(crab_tab$crabs))
View(crab_tab)
?gsub
gsub("^*Crab_", "", as.character(crab_tab$crabs))
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev2.0/", "", as.character(crab_tab$crabs))
View(crab_tab)
View(crab_tab)
# Read in data for crab
crab_dat <- read.delim(crab.files[1], header = TRUE, sep = "\t")
View(crab_dat)
View(crab_dat)
View(crab_dat)
# Move first column to rowname
crab_dat %>%
column_to_rownames(crab_dat, var = "Transcript_ID")
# Move first column to rowname
crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
View(crab_dat)
rowSums(crab_dat)
# Remove all rows with all zeros
crab_dat[rowSums(crab_dat) > 0, ]
nrow(crab_dat)
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
nrow(crab_dat)
crab_tab[1,2] <- nrow(crab_dat)
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev2.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev2.0/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_dat)
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev4.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev2.0/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_tab)
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev4.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev4.0/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/hemat_transcriptomev1.6/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/hemat_transcriptomev1.6/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_tab)
i <- 1
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
View(crab_dat)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev4.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev4.0/", "", as.character(crab_tab$crabs))
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
View(crab_dat)
colSums(crab_dat)
View(crab_tab)
View(crab_dat)
knitr::opts_chunk$set(echo = TRUE)
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("pheatmap", "tidyverse")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/cbai_transcriptomev2.0/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev2.0/immune_genes/"
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
i <- 1
# Set path to output folder that will contain all heatmaps and text files
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
View(crabdat)
i <- 2
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 4
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 5
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 6
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 7
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 8
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 9
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
knitr::opts_chunk$set(echo = TRUE)
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/cbai_transcriptomev4.0/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev4.0/immune_genes/"
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
i <- 1
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 2
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
View(crabdat)
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 4
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 5
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 6
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 7
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 8
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 9
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/hemat_transcriptomev1.6/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev4.0/immune_genes/"
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
i <- 1
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 2
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
View(crabdat)
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 4
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 5
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 6
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# When we just have two time points, we'll make a special heat map.
# It uses log2 counts, and doesn't scale by row
if (ncol(crabdat) < 3) {
# Construct heat map
print(pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = twoday_clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# We'll add a section stating to not try creating heatmaps with only 1 gene in the cluster. It throws an error in the heatmap,
# and losing one or two genes is no big deal (assuming a reasonable cluster height)
if (nrow(clust) > 1) {
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster. Again, like the graph above, we'll make it log2 scaled and not scale by row
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(log2(clust+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
} else {
# Construct heat map
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# We'll add a section stating to not try creating heatmaps with only 1 gene in the cluster. It throws an error in the heatmap,
# and losing one or two genes is no big deal (assuming a reasonable cluster height)
if (nrow(clust) > 1) {
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
}
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 7
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 8
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 9
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
