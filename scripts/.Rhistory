} else {
# Construct heat map
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
}
# Create list of labels for each individual crab
clusts <- list(c("LHL", "HTL", "LTH"),  # Crab A
c("LHL", "LTH", "HLH", "HTL"),  # Crab B
c("LTH", "HTL", "LHL"),  # Crab C
c("LHL", "HTL"),  # Crab D
c("LTH", "HTL", "HTL2", "LHL"),  # Crab E
c("HTL", "LHL", "LTH"),  # Crab F
c("MIX", "HL", "MIX2", "HL3", "HL4", "HL5"),  # Crab G
c("MIX", "LL", "LH", "MIX2", "LH2"),  # Crab H
c("HL", "MIX", "HL2", "HL3"))  # Crab I
# Ensure number of labels matches number of crab
length(clusts) == length(crabs)
# Ensure we have no duplicates in crab labels
for (i in 1:length(clusts)) {
print(length(unique(clusts[[i]])) == length(clusts[[i]]))
}
for (i in 1:length(clusts)) {
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
clustorder <- clusts[[i]]
# Rename all heatmaps to include the cluster order
file.rename(paste0(crab_out, list.files(crab_out, pattern = "^cluster_.*heatmap\\.png$")),
paste0(crab_out, "cluster_", clustorder, "_heatmap.png"))
# Rename all cluster filenames to include the cluster order
file.rename(paste0(crab_out, list.files(crab_out, pattern = "^cluster_.*\\.txt")),
paste0(crab_out, "cluster_",
clustorder, ".txt"))
}
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("pheatmap", "tidyverse")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/cbai_transcriptomev4.0/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev4.0/immune_genes/"
# Set height of clusters for samples with 3 time points
clusterht <- 1.8
# Set height of clusters for samples with 2 time points
twoday_clusterht <- 2.5
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
# Remove all genes without at least 1 samples with counts of 30+
TPMcts <- TPMcts %>%
filter_all(any_vars(. > 5))
for (i in 1:length(crabs)) {
# Set path to output folder that will contain all heatmaps and text files
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
# When we just have two time points, we'll make a special heat map.
# It uses log2 counts, and doesn't scale by row
if (ncol(crabdat) < 3) {
# Construct heat map
print(pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = twoday_clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# We'll add a section stating to not try creating heatmaps with only 1 gene in the cluster. It throws an error in the heatmap,
# and losing one or two genes is no big deal (assuming a reasonable cluster height)
if (nrow(clust) > 1) {
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster. Again, like the graph above, we'll make it log2 scaled and not scale by row
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(log2(clust+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
} else {
# Construct heat map
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# We'll add a section stating to not try creating heatmaps with only 1 gene in the cluster. It throws an error in the heatmap,
# and losing one or two genes is no big deal (assuming a reasonable cluster height)
if (nrow(clust) > 1) {
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
}
}
# Create list of labels for each individual crab
clusts <- list(c("LHL", "HTL"),  # Crab A
c("LHL", "LTH", "HLH", "HTL"),  # Crab B
c("LTH", "LTH2", "HTL", "LHL", "HLH"),  # Crab C
c("LHL", "HTL", "LTH"),  # Crab D
c("HTL", "LHL", "LTH"),  # Crab E
c("HLH", "HTL"),  # Crab F
c("MIX", "HL", "MIX2"),  # Crab G
c("MIX", "LH", "HL", "LH2", "LH3"),  # Crab H
c("HL", "HL2", "HL3", "LH"))  # Crab I
# Ensure number of labels matches number of crab
length(clusts) == length(crabs)
# Ensure we have no duplicates in crab labels
for (i in 1:length(clusts)) {
print(length(unique(clusts[[i]])) == length(clusts[[i]]))
}
for (i in 1:length(clusts)) {
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
clustorder <- clusts[[i]]
# Rename all heatmaps to include the cluster order
file.rename(paste0(crab_out, list.files(crab_out, pattern = "^cluster_.*heatmap\\.png$")),
paste0(crab_out, "cluster_", clustorder, "_heatmap.png"))
# Rename all cluster filenames to include the cluster order
file.rename(paste0(crab_out, list.files(crab_out, pattern = "^cluster_.*\\.txt")),
paste0(crab_out, "cluster_",
clustorder, ".txt"))
}
knitr::opts_chunk$set(echo = TRUE)
# Get the path of all relevant files
file_list <- Sys.glob("../output/manual_clustering/*/immune_genes/merged_modules_raw_counts.txt")
# In each iteration of the for loop, we'll choose a different transcriptome's raw counts to examine, create two neat summary tables - one with percentages, one with counts - and write as CSVs
for (i in 1:length(file_list)) {
counts <- read.table(file_list[i])
# Remove the last line - we can figure out the total on our own
counts <- head(counts, -1)
# Split the path column by slashes
counts <- separate(counts, 2, into = c("A", "B", "C", "D", "E", "F", "G", "H"), sep = "/")
# Remove columns without multiple values. Should leave us with columns for counts, crab, and module type
counts <- counts[vapply(counts, function(x) length(unique(x)) > 1, logical(1L))]
# Rename existing columns
colnames(counts) <- c("Genes", "Crab", "Module")
# Remove the _merged.txt part of each Module column
counts$Module <- str_replace(counts$Module, "_merged.txt", "")
# Pivot wider so that each module type is its own column
counts <- counts %>%
pivot_wider(names_from = Module, values_from = Genes)
# Create another table with percentage of module membership for each crab (each crab should sum to 100%)
percentages <- adorn_percentages(counts, denominator = "row", na.rm = TRUE)
# Move crab column to rowname for both tables
counts <- column_to_rownames(counts, var = "Crab")
percentages <- column_to_rownames(percentages, var = "Crab")
# Round percentages to the nearest few digits
percentages <- round(percentages, digits = 3)
# Get the path for that transcriptome
path <- file_list[i]
# Remove the ending part of the path
path <- str_replace(path, "merged_modules_raw_counts.txt", "")
# Write our counts table
write.csv(counts, file = paste0(path, "merged_modules_counts_table.csv"))
# Write our percentages table
write.csv(percentages, file = paste0(path, "merged_modules_percentages_table.csv"))
}
# Add all required libraries here
list.of.packages <- c("tidyverse", "janitor")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Get the path of all relevant files
file_list <- Sys.glob("../output/manual_clustering/*/immune_genes/merged_modules_raw_counts.txt")
# In each iteration of the for loop, we'll choose a different transcriptome's raw counts to examine, create two neat summary tables - one with percentages, one with counts - and write as CSVs
for (i in 1:length(file_list)) {
counts <- read.table(file_list[i])
# Remove the last line - we can figure out the total on our own
counts <- head(counts, -1)
# Split the path column by slashes
counts <- separate(counts, 2, into = c("A", "B", "C", "D", "E", "F", "G", "H"), sep = "/")
# Remove columns without multiple values. Should leave us with columns for counts, crab, and module type
counts <- counts[vapply(counts, function(x) length(unique(x)) > 1, logical(1L))]
# Rename existing columns
colnames(counts) <- c("Genes", "Crab", "Module")
# Remove the _merged.txt part of each Module column
counts$Module <- str_replace(counts$Module, "_merged.txt", "")
# Pivot wider so that each module type is its own column
counts <- counts %>%
pivot_wider(names_from = Module, values_from = Genes)
# Create another table with percentage of module membership for each crab (each crab should sum to 100%)
percentages <- adorn_percentages(counts, denominator = "row", na.rm = TRUE)
# Move crab column to rowname for both tables
counts <- column_to_rownames(counts, var = "Crab")
percentages <- column_to_rownames(percentages, var = "Crab")
# Round percentages to the nearest few digits
percentages <- round(percentages, digits = 3)
# Get the path for that transcriptome
path <- file_list[i]
# Remove the ending part of the path
path <- str_replace(path, "merged_modules_raw_counts.txt", "")
# Write our counts table
write.csv(counts, file = paste0(path, "merged_modules_counts_table.csv"))
# Write our percentages table
write.csv(percentages, file = paste0(path, "merged_modules_percentages_table.csv"))
}
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("tidyverse", "janitor")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev2.0/Crab_*_TPMcts.txt")
crab.files
crab_tab <- as.table(crab.files, rep(NA, times = length(crab.files)))
crab_tab <- as.data.frame(crab.files, rep(NA, times = length(crab.files)))
View(crab_tab)
View(crab_tab)
ep(NA, times = length(crab.files))
rep(NA, times = length(crab.files))
crab_tab <- as.data.frame(crab.files, rep(NA, times = length(crab.files)))
crab_tab <- matrix(crab.files, rep(NA, times = length(crab.files)))
crab_tab <- as.data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
View(crab_tab)
strsplit(crab_tab, split = "Crab_")
strsplit(crab_tab$crabs, split = "Crab_")
crabtab$crabs <- unlist(strsplit(crab_tab$crabs, split = "Crab_"))[2]
crab_tab$crabs <- unlist(strsplit(crab_tab$crabs, split = "Crab_"))[2]
View(crab_tab)
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
unlist(strsplit(crab_tab$crabs, split = "Crab_"))[2]
unlist(strsplit(crab_tab$crabs, split = "Crab_"))
strsplit(crab_tab$crabs, split = "Crab_")
?str_remove
crab_tab %>%
str_remove("../output/TPM_counts/cbai_transcriptomev2.0/")
View(crab_tab)
crab_tab %>%
str_remove(crabs, "../output/TPM_counts/cbai_transcriptomev2.0/")
crab_tab$crabs <- sub("^*Crab_", "", as.character(crab_tab$crabs))
View(crab_tab)
crab_tab$crabs <- sub("^*Crab_", "", as.character(crab_tab$crabs))
View(crab_tab)
crab_tab$crabs <- gsub("^*Crab_", "", as.character(crab_tab$crabs))
View(crab_tab)
?gsub
gsub("^*Crab_", "", as.character(crab_tab$crabs))
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev2.0/", "", as.character(crab_tab$crabs))
View(crab_tab)
View(crab_tab)
# Read in data for crab
crab_dat <- read.delim(crab.files[1], header = TRUE, sep = "\t")
View(crab_dat)
View(crab_dat)
View(crab_dat)
# Move first column to rowname
crab_dat %>%
column_to_rownames(crab_dat, var = "Transcript_ID")
# Move first column to rowname
crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
View(crab_dat)
rowSums(crab_dat)
# Remove all rows with all zeros
crab_dat[rowSums(crab_dat) > 0, ]
nrow(crab_dat)
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
nrow(crab_dat)
crab_tab[1,2] <- nrow(crab_dat)
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev2.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev2.0/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_dat)
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev4.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev2.0/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_tab)
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev4.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev4.0/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_tab)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/hemat_transcriptomev1.6/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/hemat_transcriptomev1.6/", "", as.character(crab_tab$crabs))
for (i in 1:length(crab.files)) {
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
crab_tab[i,2] <- nrow(crab_dat)
}
View(crab_tab)
i <- 1
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
View(crab_dat)
# Get all files of crabs
crab.files <- Sys.glob("../output/TPM_counts/cbai_transcriptomev4.0/Crab_*_TPMcts.txt")
# Initialize dataframe with blank column for counts.
crab_tab <- data.frame(crabs = crab.files, counts = rep(NA, times = length(crab.files)))
# Remove most of the filepath so our column name is clearer
crab_tab$crabs <- gsub(pattern = "../output/TPM_counts/cbai_transcriptomev4.0/", "", as.character(crab_tab$crabs))
# Read in data for crab
crab_dat <- read.delim(crab.files[i], header = TRUE, sep = "\t")
# Move first column to rowname
crab_dat <- crab_dat %>%
column_to_rownames(var = "Transcript_ID")
# Remove all rows with all zeros
crab_dat <- crab_dat[rowSums(crab_dat) > 0, ]
View(crab_dat)
colSums(crab_dat)
View(crab_tab)
View(crab_dat)
