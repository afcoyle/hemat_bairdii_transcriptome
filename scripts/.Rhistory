colorOrder <- c("grey", standardColors(50)) # Determine color order
moduleLabels <- match(moduleColors, colorOrder)-1 # Construct numerical labels based on colors
MEs <- mergedMEs # Replace unmerged MEs
# Count the number of genes and samples
nGenes <- ncol(CrabExpr0)
nSamples <- nrow(CrabExpr0)
# Recalculate MEs with color labels, order MEs based on MEs0
MEs0 <- moduleEigengenes(CrabExpr0, moduleColors)$eigengenes
MEs <- orderMEs(MEs0)
# Calculate trait correlations and obtain p-values
moduleTraitCor <- cor(MEs, crabClinicalData, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
moduleTraitPvalue
# Create text matrix for correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
# Ensure matrix has same dimensions
dim(textMatrix) == dim(moduleTraitCor)
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(crabTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-Treatment relationships"))
# Define "temp" using information from trait matrix
temp <- as.data.frame(crabClinicalData$temp)
# Modify names
names(temp) <- "temp"
# Save module names without "ME" at beginning of each entry
modNames <- substr(names(MEs), 3, nchar(names(MEs)))
# Obtain gene significance statistics
geneTraitSignificance <- as.data.frame(cor(CrabExpr0, temp, use = "p"))
# Add column names
names(geneTraitSignificance) <- paste("GS.", names(temp), sep = "")
# Confirm formatting
head(geneTraitSignificance)
# Obtain p-values for each gene significance stat
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
# Add column names
names(GSPvalue) <- paste("p.GS", names(temp), sep = "")
# Confirm formatting
head(GSPvalue)
# Obtain gene module membership stats
geneModuleMembership <- as.data.frame(cor(CrabExpr0, MEs, use = "p"))
# Add column names
names(geneModuleMembership) <- paste("MM", modNames, sep = "")
# Confirm formatting
head(geneModuleMembership)
# Obtain p-values for each module membership statistic
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
# Add column names
names(MMPvalue) <- paste("p.MM", modNames, sep = "")
# Confirm formatting
head(MMPvalue)
nSets
# Save gene names as probes
probes <- names(CrabExpr0)
# Write out the gene lists for each module of interest
for (module in modNames) {
modGenes <- (moduleColors == module) # Select module probes
modLLIDs <- probes[modGenes] # Get gene IDs
fileName <- paste(file_start, "GeneList-", module, ".txt", sep = "") # Assign filename for each module
write.table(as.data.frame(modLLIDs), file = fileName, sep = "\t", row.names = FALSE, col.names = FALSE) # Write out files
}
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
blastx_table_site
getwd()
probes
# Location of blastx table
blastx_table_site <- "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab"
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
View(crabGeneAnnot)
# Remove unnecessary columns
crabGeneAnnot <- crabGeneAnnot[, -c(3:10, 12)]
# Name columns
colnames(crabGeneAnnot) <- c("seqIDs", "Uniprot", "e-value")
# Look at column formatting
head(crabGeneAnnot)
# If pipes in Uniprot ID column, separate to specifically get Uniprot ID, and then remove those new columns with species info
gene_ids <- dplyr::pull(crabGeneAnnot, Uniprot)
if(any(grepl("|", gene_ids, fixed = TRUE))) {
crabGeneAnnot <- separate(data = crabGeneAnnot, col = Uniprot, into = c("sp", "Uniprot", "Species"),
sep = "\\|")
crabGeneAnnot <- crabGeneAnnot[,-c(2, 4)]
}
# Match probes with annotations
probes2annot <- match(probes, crabGeneAnnot$seqIDs)
# Check that no probe does not have an annotation. Should return 0
sum(is.na(probes2annot))
probes2annot
probes
annot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
CrabExpr0
View(CrabExpr0)
consMEs.unord <- multiSetMEs(CrabExpr0, universalColors = moduleLabels, excludeGrey = TRUE)
geneInfo0 <- data.frame("geneID" = probes,
"Uniprot" = crabGeneAnnot$Uniprot[probes2annot],
moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
head(geneInfo0)
View(geneInfo0)
# Location of blastx table
blastx_table_site <- "../data/cbai_transcriptomev4.0_blastx.txt"
# Import gene annotation info
crabGeneAnnot <- read.delim(blastx_table_site, header = FALSE, sep = "\t")
# Remove unnecessary columns
crabGeneAnnot <- crabGeneAnnot[, -c(3:10, 12)]
# Name columns
colnames(crabGeneAnnot) <- c("seqIDs", "Uniprot", "e-value")
# Look at column formatting
head(crabGeneAnnot)
# If pipes in Uniprot ID column, separate to specifically get Uniprot ID, and then remove those new columns with species info
gene_ids <- dplyr::pull(crabGeneAnnot, Uniprot)
if(any(grepl("|", gene_ids, fixed = TRUE))) {
crabGeneAnnot <- separate(data = crabGeneAnnot, col = Uniprot, into = c("sp", "Uniprot", "Species"),
sep = "\\|")
crabGeneAnnot <- crabGeneAnnot[,-c(2, 4)]
}
# Match probes with annotations
probes2annot <- match(probes, crabGeneAnnot$seqIDs)
sum(is.na(probes2annot))
probes2annot
View(crabGeneAnnot)
knitr::opts_chunk$set(echo = TRUE)
library("kableExtra")
library("tidyverse")
library("knitr")
library("magick")
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- "tidyverse"
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Paths to BLAST tables
blast_filepaths <- c("../data/cbai_diamond_blastx_table_transcriptomev2.0.txt",  # For cbai_transcriptomev2.0
"../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",     # For cbai_transcriptomev4.0
"../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab")    # For hemat_transcriptomev1.6
# Vector of our transcriptomes. Will be used in assembling file paths for GO files and our output files.
# Make sure these are in the same order as the above BLAST filepaths.
transcriptomes <- c("cbai_transcriptomev2.0", "cbai_transcriptomev4.0", "hemat_transcriptomev1.6")
# Previously, we used all GO terms that popped up when you search "immune" on amigo.geneontology.org
# To keep things simpler and more straightforward, we'll now just use the GO term for immune response, GO:0006955
immune_terms <- "GO:0006955"
# Create vector of all GO terms associated with immune response
# GO terms from amigo.geneontology.org
# immune_terms <- c("GO:0006955",    # Immune Response
#                  "GO:0006959",    # Humoral Immune Response
#                  "GO:1905036",    # Positive regulation of antifungal innate immune response
#                  "GO:1905035",    # Negative regulation of antifungal innate immune response
#                  "GO:1905675",    # Negative regulation of adaptive immune memory response
#                  "GO:1905674",    # Regulation of adaptive immune memory response
#                 "GO:1905679",    # Positive regulation of adaptive immune effector response
#                  "GO:1905678",    # Negative regulation of adaptive immune effector response
#                  "GO:1905677",    # Regulation of adaptive immune effector response
#                  "GO:1905676")    # Positive regulation of adaptive immune memory response
knitr::opts_chunk$set(echo = TRUE)
# Elevated Day 0 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEGs_IDs/elev0_vs_elev2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_All_GOIDs.txt")
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
# Elevated Day 0 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEGs_IDs/elev0_vs_elev2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_All_GOIDs.txt")
getwd()
# Elevated Day 0 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_All_GOIDs.txt")
# Elevated Day 0 vs. Elevated Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_DEG_IDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_DEG_GOIDs.txt")
# Read in GO terms file
go_tab <- read.delim("../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/elev0_vs_elev2_indiv_DEG_GOIDs.txt",
header = FALSE, sep = "\t", na.strings = c("", "NA"))
View(go_tab)
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
View(immune_genes)
# Read in GO terms file
go_tab <- read.delim("../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/amb0_vs_amb2_indiv_DEG_GOIDs.txt",
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Ambient Day 0 vs. Ambient Day 2. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/amb0_vs_amb2_indiv_DEG_IDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/amb0_vs_amb2_indiv_DEG_GOIDs.txt")
# Read in GO terms file
go_tab <- read.delim("../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/amb0_vs_amb2_indiv_DEG_GOIDs.txt",
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
# Paths to BLAST tables
blast_filepaths <- c("../data/cbai_diamond_blastx_table_transcriptomev2.0.txt",  # For cbai_transcriptomev2.0
"../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",     # For cbai_transcriptomev4.0
"../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab")    # For hemat_transcriptomev1.6
# Paths to BLAST tables
blast_filepaths <- c("../data/cbai_diamond_blastx_table_transcriptomev2.0.txt",  # For cbai_transcriptomev2.0
"../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",     # For cbai_transcriptomev4.0
"../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab")    # For hemat_transcriptomev1.6
# Vector of our transcriptomes. Will be used in assembling file paths for GO files and our output files.
# Make sure these are in the same order as the above BLAST filepaths.
transcriptomes <- c("cbai_transcriptomev2.0", "cbai_transcriptomev4.0", "hemat_transcriptomev1.6")
immune_terms <- "GO:0044403"
i <- 3
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# Paths to BLAST tables
blast_filepaths <- c("../data/cbai_diamond_blastx_table_transcriptomev2.0.txt",  # For cbai_transcriptomev2.0
"../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",     # For cbai_transcriptomev4.0
"../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab")    # For hemat_transcriptomev1.6
# Vector of our transcriptomes. Will be used in assembling file paths for GO files and our output files.
# Make sure these are in the same order as the above BLAST filepaths.
transcriptomes <- c("cbai_transcriptomev2.0", "cbai_transcriptomev4.0", "hemat_transcriptomev1.6")
immune_terms <- "GO:0044403"
i <- 1
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries that are installed with install.packages() here
list.of.packages <- "tidyverse"
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("DESeq2", "WGCNA")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Path to kallisto libraries
kallisto_path <- "../output/kallisto_libraries/cbai_transcriptomev4.0/"
# Libraries we want to read in to our TPM matrix
libraries <- c("178", "118", "132", "073", "151", "113", "173", "072", "127", "359", "349", "334", "221", "254", "222", "272", "294", "280", "463", "481", "485", "427", "445", "425")
# If treating elevated day 0 and lowered day 0 as ambient
crabTraits <- data.frame("crab" = c(rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I"), times = 2),
"A", "B", "C", "D", "E", "F"),
"day" = factor(c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6))),
"temp" = c(rep("Ambient", times = 12),
rep("Lowered", times = 3),
rep("Elevated", times = 3),
rep("Ambient", times = 3),
rep("Lowered", times = 3)),
"infection" = c(rep(c(rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected",
rep("Infected", times = 3)), times = 2),
rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected"),
"hemat_level" = c(rep(c("L", "H", "H",
"H", "L", "L",
"L", "H", "H"),
times = 2),
"L", "H", "H",
"H", "L", "L"),
"CW" = c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2),
132.2, 128.8, 145,
127.4, 134.1, 133.3),
"SC" = c(rep("New", times = 5),
rep("Old", times = 2),
rep("New", times = 7),
rep("Old", times = 2),
rep("New", times = 7),
"Old"))
# If treating elevated day 0 as ambient
crabClinicalData <- data.frame("crab" = c(rep(c(1, 2, 3, 4, 5, 6, 7, 8, 9), times = 2),
1, 2, 3, 4, 5, 6),
"day" = c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6)),
"temp" = c(rep(2, times = 12),
rep(1, times = 3),
rep(3, times = 3),
rep(2, times = 3),
rep(1, times = 3)),
"infection" = c(rep(c(rep(2, times = 3),
1, 2, 1,
rep(2, times = 3)), times = 2),
rep(2, times = 3),
1, 2, 1),
"hemat_level" = c(rep(c("1", "2", "2",
"2", "1", "1",
"1", "2", "2"),
times = 2),
"1", "2", "2",
"1", "1", "1"),
"CW" = c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2),
132.2, 128.8, 145,
127.4, 134.1, 133.3),
"SC" = c(rep(1, times = 5),
rep(2, times = 2),
rep(1, times = 7),
rep(2, times = 2),
rep(1, times = 7),
2))
# Start and ending we want for each file and graph saved
file_start <- paste0("../output/WGCNA_output/cbai_transcriptomev4.0/all_crabs_no_filter/", variable, "_as_var/")
# Variable being examined - should match column in two data frames above
variable <- "day"
# Start and ending we want for each file and graph saved
file_start <- paste0("../output/WGCNA_output/cbai_transcriptomev4.0/all_crabs_no_filter/", variable, "_as_var/")
file_start
# Location of blastx table
blastx_table_site <- "../data/cbai_blastx_table_transcriptomev4.0.txt"
?plotPCA
knitr::opts_chunk$set(echo = TRUE)
exp_design <- data.frame(temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",
"amb", "amb", "amb",
"amb", "low", "low",
"amb", "low", "low",
"amb", "low", "low",
"amb", "elev", "amb",
"elev", "amb", "elev")),
day = factor(c(0, 2, 17,
0, 2, 17,
0, 2, 17,
0, 2, 17,
0, 2, 17,
0, 2, 17,
0, 2, 0,
2, 0, 2)),
hemat_level = factor(c(rep("L", times = 3),
rep("H", times = 9),
rep("L", times = 8),
rep("H", times = 4))),
crab = factor(c(rep("A", times = 3),
rep("B", times = 3),
rep("C", times = 3),
rep("D", times = 3),
rep("E", times = 3),
rep("F", times = 3),
rep("G", times = 2),
rep("H", times = 2),
rep("I", times = 2))),
infection = factor(c(rep("Inf", times = 9),
rep("Uninf", times = 3),
rep("Inf", times = 3),
rep("Uninf", times = 3),
rep("Inf", times = 6))))
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev2.0/all_indiv_libraries/kallisto.isoform.counts.matrix", header = TRUE, sep = "\t")
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("tidyverse", "plotly")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("apeglm", "DESeq2", "vsn")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
BiocManager::install("vsn")
R.version()
sessionInfo()
library('vsn')
library(vsn)
help(vsn)
library(vsn)
BiocManager::install("vsn")
.libPaths()
