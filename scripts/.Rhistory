# Due to low numbers of normalized counts, the function returns an error when ran.
# This will be avoided by removing the call to DESeq2::vst(), which performs the analysis
# necessary for our PCA plot. Therefore, our output will lack a PCA plot, but will be
# otherwise unchanged.
exp_design <- data.frame(Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 0", "Day 0", "Day 0",
"Day 2", "Day 2", "Day 2",
"Day 2", "Day 2", "Day 2")),
Temperature = factor(c("Decreased", "Decreased", "Decreased",
"Elevated", "Elevated", "Elevated",
"Decreased", "Decreased", "Decreased",
"Elevated", "Elevated", "Elevated")))
kallisto_path <- "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_elev0_vs_low2_elev2_indiv/kallisto.isoform.counts.matrix"
experiment_table <-  exp_design
output_path <- "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_elev0_vs_low2_elev2_indiv"
variable <- "Day"
# Read in matrix created by Trinity from Kallisto outputs
data <- read.table(kallisto_path, header = TRUE,
sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
print(head(data))
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(experiment_table) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(experiment_table)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = experiment_table,
design = as.formula(paste0("~", variable)))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Shrink LFC estimates - used in shrunken MA plot
lfcnames <- resultsNames(deseq2.dds)
print(lfcnames[2])
resLFC <- lfcShrink(deseq2.dds, coef = lfcnames[2],
type = "apeglm")
# Look specifically at results w/ adjusted p-value < 0.05
deseq_res05 <- results(deseq2.dds, alpha = 0.05)
print("Number of DEGs (padj <= 0.05)")
print(sum(deseq_res05$padj < 0.05, na.rm = TRUE))
# Plot of full results, not shrunken
plotMA(deseq2.res, ylim = c(-28, 28))
dev.copy(png, file.path(output_path, "allres_MAplot.png"))
dev.off()
# Plot of full results, shrunken
plotMA(resLFC, ylim = c(-2, 2), main = "apeglm")
dev.copy(png, file.path(output_path, "allres_shrunken_MAplot.png"))
dev.off()
# Plot of res05 results, not shrunken
plotMA(deseq_res05, ylim = c(-20, 20))
dev.copy(png, file.path(output_path, "res05_MAplot.png"))
dev.off()
# Create a plot of Log2 fold change vs. normalized counts
deseq2_tmp <- deseq2.res
plot(deseq2_tmp$baseMean, deseq2_tmp$log2FoldChange, pch = 20,
cex = 0.45, ylim = c(-28, 28), log = "x", col = "darkgray",
main = paste("Differences by", variable, "(padj <= 0.05)"),
xlab = "mean of normalized counts",
ylab = "Log2 Fold Change")
# Get significant points, plot again so they're a diff color
deseq2_tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) &
deseq2.res$padj <= 0.05, ]
points(deseq2_tmp.sig$baseMean, deseq2_tmp.sig$log2FoldChange,
pch = 20, cex = 0.45, col = "red")
abline(h=c(-1,1), col = "blue")
dev.copy(png, file.path(output_path, "normalizedcts_v_log2foldchange.png"))
dev.off()
# Plot dispersion estimates
plotDispEsts(deseq2.dds)
dev.copy(png, file.path(output_path, "dispersion_estimates.png"))
dev.off()
# write all genes to table
write.table(deseq2_tmp, file.path(output_path, "AllGenes.txt"),
row.names = TRUE, col.names = FALSE,
quote = FALSE, sep = "\t")
write.table(deseq2_tmp, file.path(output_path, "AllGenes_wcols.txt"),
row.names = TRUE, col.names = TRUE,
quote = FALSE, sep = "\t")
# Write significant day-differing genes to table
write.table(deseq2_tmp.sig, file.path(output_path, "DEGlist.txt"),
row.names = TRUE, col.names = FALSE, quote = FALSE,
sep = "\t")
write.table(deseq2_tmp.sig, file.path(output_path, "DEGlist_wcols.txt"),
row.names = TRUE, col.names = TRUE, quote = FALSE,
sep = "\t")
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("tidyverse", "plotly")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("apeglm", "DESeq2", "vsn")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(temp = factor(c("Low", "Amb", "Elev")),
day = factor(c(0, 2, 17)))
exp_design
exp_design <- data.frame(Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 2", "Day 2", "Day 2")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/elev0_vs_elev2_indiv",
variable = "Day")
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Elevated", "Elevated", "Elevated")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/amb2_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_elev2_indiv",
variable = "Temperature")
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_vs_low2_indiv",
variable = "Day")
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased")),
Day = factor(c(0, 0, 0,
2, 2, 2,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_vs_low217_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_vs_low217_indiv",
variable = "Temperature")
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased")),
Day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
17, 17, 17,
2, 2, 2,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_amb0217_vs_low217_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_amb0217_vs_low217_indiv",
variable = "Temperature")
exp_design <- data.frame(Temperature = factor(c("Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient")),
Day = factor(c(2, 2, 2,
17, 17, 17,
2, 2, 2,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low217_vs_amb217_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low217_vs_amb217_indiv",
variable = "Temperature")
exp_design <- data.frame(Temperature = factor(c("Decreased", "Decreased", "Decreased",
"Ambient", "Ambient", "Ambient")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_vs_amb0_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_vs_amb0_indiv",
variable = "Temperature")
exp_design <- data.frame(Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 17", "Day 17", "Day 17")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_vs_low17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_vs_low17_indiv",
variable = "Day")
exp_design <- data.frame(Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 0", "Day 0", "Day 0",
"Day 17", "Day 17", "Day 17",
"Day 17", "Day 17", "Day 17")),
Temperature = factor(c("Decreased", "Decreased", "Decreased",
"Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Ambient", "Ambient", "Ambient")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_amb0_vs_low17_amb17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_amb0_vs_low17_amb17_indiv",
variable = "Day")
exp_design <- data.frame(day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/amb0_vs_amb2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb0_vs_amb2_indiv",
variable = "day")
exp_design <- data.frame(day = factor(c(0, 0, 0,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/amb0_vs_amb17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb0_vs_amb17_indiv",
variable = "day")
exp_design <- data.frame(Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 0", "Day 0", "Day 0",
"Day 2", "Day 2", "Day 2",
"Day 2", "Day 2", "Day 2")),
Temperature = factor(c("Decreased", "Decreased", "Decreased",
"Elevated", "Elevated", "Elevated",
"Decreased", "Decreased", "Decreased",
"Elevated", "Elevated", "Elevated")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_elev0_vs_low2_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_elev0_vs_low2_elev2_indiv",
variable = "Day")
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries that are installed with install.packages() here
list.of.packages <- "tidyverse"
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- ""
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
source("hematodinium_analysis_functions.R")
# Blue module, cbai2.0, all crabs
WGCNA_modules_accessions_kMEs(module_name = "blue",
transcriptome = "cbai_transcriptomev2.0",
compar = "all_crabs_no_filter",
blast_path = "../data/cbai_hemat_diamond_blastx_table_transcriptome_v2.0.txt",
output_GOMWU = "../scripts/11_4_running_GOMWU/",
output_accessions = "../output/accession_n_GOids/WGCNA_modules/")
source("hematodinium_analysis_functions.R")
# Pink module, hemat1.6, all crabs
WGCNA_modules_accessions_kMEs(module_name = "pink",
transcriptome = "hemat_transcriptomev1.6",
compar = "all_crabs_no_filter",
blast_path = "../data/hemat_blastx_table_transcriptome_v1.6.txt",
output_GOMWU = "../scripts/11_4_running_GOMWU/",
output_accessions = "../output/accession_n_GOids/WGCNA_modules/")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts")
# Pink module, hemat1.6, all crabs
WGCNA_modules_accessions_kMEs(module_name = "pink",
transcriptome = "hemat_transcriptomev1.6",
compar = "all_crabs_no_filter",
blast_path = "../data/hemat_blastx_table_transcriptome_v1.6.txt",
output_GOMWU = "../scripts/11_4_running_GOMWU/",
output_accessions = "../output/accession_n_GOids/WGCNA_modules/")
source("hematodinium_analysis_functions.R")
# Pink module, hemat1.6, all crabs
WGCNA_modules_accessions_kMEs(module_name = "pink",
transcriptome = "hemat_transcriptomev1.6",
compar = "all_crabs_no_filter",
blast_path = "../data/hemat_blastx_table_transcriptome_v1.6.txt",
output_GOMWU = "../scripts/11_4_running_GOMWU/",
output_accessions = "../output/accession_n_GOids/WGCNA_modules/")
knitr::opts_chunk$set(echo = TRUE)
# Blue module, cbai2.0, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_blue_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_blue_GOIDs.txt")
# Salmon module, cbai2.0, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_salmon_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_salmon_GOIDs.txt")
# Cyan module, cbai2.0, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_cyan_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_cyan_GOIDs.txt")
# Yellow module, cbai2.0, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_yellow_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev2.0/all_crabs_no_filter_yellow_GOIDs.txt")
# Brown module, cbai4.0, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_brown_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_brown_GOIDs.txt")
# Black module, cbai4.0, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_black_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_black_GOIDs.txt")
# Pink module, hemat1.6, all crabs
uniprot_to_GO(accession_path = "../output/accession_n_GOids/WGCNA_modules/hemat_transcriptomev1.6/all_crabs_no_filter_pink_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/WGCNA_modules/hemat_transcriptomev1.6/all_crabs_no_filter_pink_GOIDs.txt")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts/11_4_running_GOMWU")
# Edit these to match your data file names:
input="cbaiv2.0_all_crabs_no_filter_blue_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai2.0_all_crabs_no_filter_blue_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv2.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev2.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv2.0_all_crabs_no_filter_salmon_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai2.0_all_crabs_no_filter_salmon_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv2.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev2.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv2.0_all_crabs_no_filter_cyan_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai2.0_all_crabs_no_filter_cyan_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv2.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev2.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv2.0_all_crabs_no_filter_yellow_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai2.0_all_crabs_no_filter_yellow_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv2.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev2.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv4.0_all_crabs_no_filter_brown_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_all_crabs_no_filter_brown_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv4.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv4.0_all_crabs_no_filter_black_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_all_crabs_no_filter_black_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
file_loc <- input %>%
str_remove("cbaiv4.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_all_crabs_no_filter_pink_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
