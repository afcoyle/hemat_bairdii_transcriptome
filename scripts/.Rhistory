new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/cbai_transcriptomev2.0/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev2.0/immune_genes/"
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
i <- 1
# Set path to output folder that will contain all heatmaps and text files
crab_out <- paste0(heatmap_output, "Crab_", crabs[i], "/")
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
View(crabdat)
i <- 2
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 4
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 5
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 6
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 7
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 8
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 9
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
knitr::opts_chunk$set(echo = TRUE)
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/cbai_transcriptomev4.0/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev4.0/immune_genes/"
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
i <- 1
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 2
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
View(crabdat)
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 4
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 5
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 6
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 7
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 8
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 9
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
# Give IDs for all libraries for ambient-temperature crab. All these are infected crab.
crabA_libs <- c("178", "359", "463")
crabB_libs <- c("118", "349", "481")
crabC_libs <- c("132", "334", "485")
# Also giving IDs for all libraries for decreased-temperature crab. D and F are uninfected, E is infected.
crabD_libs <- c("073", "221", "427")
crabE_libs <- c("151", "254", "445")
crabF_libs <- c("113", "222", "425")
# Give IDs for all libraries for elevated-temperature crab. Note: again, we have no libraries on Day 17 for these crabs
crabG_libs <- c("173", "272")
crabH_libs <- c("072", "294")
crabI_libs <- c("127", "280")
# Vector of crab IDs
crabs <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
# List of all crabs
crabIDs <- list(crabA_libs, crabB_libs, crabC_libs, crabD_libs, crabE_libs, crabF_libs, crabG_libs, crabH_libs, crabI_libs)
# Set path to TPM output folder
TPM_outpath <- "../output/TPM_counts/hemat_transcriptomev1.6/"
# Set path to general heatmap output folder
heatmap_output <- "../output/manual_clustering/cbai_transcriptomev4.0/immune_genes/"
# Read in the initial data file
TPMcts <- read.delim(file = paste0(TPM_outpath,
"immune_genes_all_libs_TPMcts.txt"
),
row.names = 1,
check.names = FALSE)
i <- 1
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 2
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
View(crabdat)
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 4
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 5
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 6
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# When we just have two time points, we'll make a special heat map.
# It uses log2 counts, and doesn't scale by row
if (ncol(crabdat) < 3) {
# Construct heat map
print(pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(log2(crabdat+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = twoday_clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# We'll add a section stating to not try creating heatmaps with only 1 gene in the cluster. It throws an error in the heatmap,
# and losing one or two genes is no big deal (assuming a reasonable cluster height)
if (nrow(clust) > 1) {
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster. Again, like the graph above, we'll make it log2 scaled and not scale by row
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(log2(clust+1), cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "none",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
} else {
# Construct heat map
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
# Plot again to save in our file
png(paste0(crab_out, "heatmap.png"))
print(pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9))
dev.off()
out <- pheatmap(crabdat, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = "gene counts by day",
fontsize = 9)
hc <- out$tree_row
lbl <- cutree(hc, h = clusterht)  # split dendrogram based on height specified above
# Loop through gene clusters, printing heatmap for each
for (j in 1:length(unique(lbl))) {
clust <- crabdat[which(lbl==j) %>% names(), ]
# We'll add a section stating to not try creating heatmaps with only 1 gene in the cluster. It throws an error in the heatmap,
# and losing one or two genes is no big deal (assuming a reasonable cluster height)
if (nrow(clust) > 1) {
# Write results to table
write.table(clust, file = paste0(crab_out,
"cluster_",
j, ".txt"),
sep = "\t",
row.names = TRUE)
# Create heat map for each cluster
png(paste0(crab_out, "cluster_", j, "_heatmap.png"))
print(pheatmap(clust, cluster_rows = TRUE,
show_rownames = FALSE,
na.rm = TRUE,
cluster_cols = FALSE,
scale = "row",
main = paste0("gene counts by day, cluster ", j),
fontsize = 9))
dev.off()
}
}
}
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 3
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 7
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 8
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
i <- 9
# Select the columns that match our particular crab
crabdat <- TPMcts[, crabIDs[[i]]]
# Remove all rows without any values
crabdat <- crabdat[rowSums(crabdat[]) > 0, ]
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- "tidyverse"
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
View(summ.dat)
cor(summ.dat %>% corrplot::corrplot(tl.cex = .45))
# Add all required libraries here
list.of.packages <- c("tidyverse", "corrplot")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
cor(summ.dat %>% corrplot::corrplot(tl.cex = .45))
View(summ.dat)
# Convert as many data columns as possible to numeric
colnames(summ.dat)
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
colnames(summ.dat)
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(summ.dat$Crab)
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(as.factor(summ.dat$Crab))
# Convert as many data columns as possible to numeric
class(summ.dat$Crab)
# Convert as many data columns as possible to numeric
class(summ.dat$Treatment)
summ.dat$Treatment <- as.numeric(as.factor(summ.dat$Treatment))
summ.dat$cPCR_positive <- as.numeric(as.factor(summ.dat$cPCR_positive))
# Remove death column
summ.dat <- select(summ.dat, -death)
summ.dat$imm_mature <- as.numeric(as.factor(summ.dat$imm_mature))
# Check class of each column
str(summ.dat)
cor(summ.dat) %>%
corrplot(tl.cex = .45)
View(summ.dat)
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(as.factor(summ.dat$Crab))
summ.dat$Treatment <- as.numeric(as.factor(summ.dat$Treatment))
summ.dat$cPCR_positive <- as.numeric(as.factor(summ.dat$cPCR_positive))
summ.dat$imm_mature <- as.numeric(as.factor(summ.dat$imm_mature))
# Remove columns that aren't informative
# Also dropping qPCR_SQ_mean_timepoint2, as we have NAs present
summ.dat <- select(summ.dat, -c(Uniq_ID, death, qPCR_SQ_mean_timepoint2))
# Check class of each column
str(summ.dat)
# All are ints or numeric, can continue
cor(summ.dat) %>%
corrplot(tl.cex = .45)
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(as.factor(summ.dat$Crab))
summ.dat$Treatment <- as.numeric(as.factor(summ.dat$Treatment))
summ.dat$cPCR_positive <- as.numeric(as.factor(summ.dat$cPCR_positive))
summ.dat$imm_mature <- as.numeric(as.factor(summ.dat$imm_mature))
# Remove columns that aren't informative
# Also dropping qPCR_SQ_mean_timepoint2, as we have NAs present
summ.dat <- select(summ.dat, -c(Crab, Uniq_ID, death, qPCR_SQ_mean_timepoint2))
# Check class of each column
str(summ.dat)
# All are ints or numeric, can continue
cor(summ.dat) %>%
corrplot(tl.cex = .45)
?corrplot
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
?as.factor
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
View(summ.dat)
summ.dat$Treatment <- as.numeric(as.factor(summ.dat$Treatment), levels = c("Low", "Amb", "Elev"))
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(as.factor(summ.dat$Crab))
as.factor(summ.dat$Treatment), levels = c("Low", "Amb", "Elev")
as.factor(summ.dat$Treatment, levels = c("Low", "Amb", "Elev"))
as.ordered(summ.dat$Treatment, levels = c("Low", "Amb", "Elev"))
as.ordered(summ.dat$Treatment)
summ.dat$Treatment <- as.numeric(as.ordered(summ.dat$Treatment, levels = c("Low", "Amb", "Elev")))
ordered(summ.dat$Treatment, levels = c("Low", "Amb", "Elev"))
summ.dat$Treatment <- as.numeric(ordered(summ.dat$Treatment, levels = c("Low", "Amb", "Elev")))
View(summ.dat)
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(as.factor(summ.dat$Crab))
summ.dat$Treatment <- as.numeric(ordered(summ.dat$Treatment, levels = c("Low", "Amb", "Elev")))
summ.dat$cPCR_positive <- as.numeric(as.factor(summ.dat$cPCR_positive))
summ.dat$imm_mature <- as.numeric(as.factor(summ.dat$imm_mature))
# Remove columns that aren't informative
# Also dropping qPCR_SQ_mean_timepoint2, as we have NAs present
summ.dat <- select(summ.dat, -c(Crab, Uniq_ID, death, qPCR_SQ_mean_timepoint2))
# Check class of each column
str(summ.dat)
# All are ints or numeric, can continue
cor(summ.dat) %>%
corrplot(tl.cex = .45)
# Read in data
summ.dat <- read.csv("../data/indiv_crab_summary.csv")
# Rename first column to "Crab" to make it clearer
summ.dat <- rename(summ.dat, Crab = "ï..Crab")
# Convert as many data columns as possible to numeric
summ.dat$Crab <- as.numeric(as.factor(summ.dat$Crab))
summ.dat$Treatment <- as.numeric(ordered(summ.dat$Treatment, levels = c("Low", "Amb", "Elev")))
summ.dat$cPCR_positive <- as.numeric(as.factor(summ.dat$cPCR_positive))
summ.dat$imm_mature <- as.numeric(as.factor(summ.dat$imm_mature))
# Remove columns that aren't informative
# Also dropping qPCR_SQ_mean_timepoint2, as we have NAs present
summ.dat <- select(summ.dat, -c(Crab, Uniq_ID, death, qPCR_SQ_mean_timepoint2, Timepoints))
# Check class of each column
str(summ.dat)
# All are ints or numeric, can continue
cor(summ.dat) %>%
corrplot(tl.cex = .45)
# Add all required libraries here
list.of.packages <- c("tidyverse", "corrplot", "PerformanceAnalytics")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
chart.Correlation(summ.dat, histogram =F, pch = 19)
View(summ.dat)
chart.Correlation(summ.dat, histogram =F, pch = 5)
?chart.Correlation
chart.Correlation(summ.dat, histogram = T, pch = 5)
chart.Correlation(summ.dat, histogram = F, pch = 5)
chart.Correlation(summ.dat, histogram = F, pch = 13)
chart.Correlation(summ.dat, histogram = F, pch = 5)
View(summ.dat)
