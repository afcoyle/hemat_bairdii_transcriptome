immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
View(immune_tab)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# Write table to file
write.table(immune_tab, file = paste0("../output/immune_genes/", transcriptomes[i], "/transcript_accession_IDs/all_indiv_libraries.txt"),
row.names = FALSE,
sep = "\t")
# Paths to BLAST tables
blast_filepaths <- c("../data/cbai_diamond_blastx_table_transcriptomev2.0.txt",  # For cbai_transcriptomev2.0
"../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",     # For cbai_transcriptomev4.0
"../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab")    # For hemat_transcriptomev1.6
# Vector of our transcriptomes. Will be used in assembling file paths for GO files and our output files.
# Make sure these are in the same order as the above BLAST filepaths.
transcriptomes <- c("cbai_transcriptomev2.0", "cbai_transcriptomev4.0", "hemat_transcriptomev1.6")
# Previously, we used all GO terms that popped up when you search "immune" on amigo.geneontology.org
# To keep things simpler and more straightforward, we'll now just use the GO term for immune response, GO:0006955
immune_terms <- "GO:0006955"
# Create vector of all GO terms associated with immune response
# GO terms from amigo.geneontology.org
# immune_terms <- c("GO:0006955",    # Immune Response
#                  "GO:0006959",    # Humoral Immune Response
#                  "GO:1905036",    # Positive regulation of antifungal innate immune response
#                  "GO:1905035",    # Negative regulation of antifungal innate immune response
#                  "GO:1905675",    # Negative regulation of adaptive immune memory response
#                  "GO:1905674",    # Regulation of adaptive immune memory response
#                 "GO:1905679",    # Positive regulation of adaptive immune effector response
#                  "GO:1905678",    # Negative regulation of adaptive immune effector response
#                  "GO:1905677",    # Regulation of adaptive immune effector response
#                  "GO:1905676")    # Positive regulation of adaptive immune memory response
for (i in 1:length(blast_filepaths)) {
#### BLAST file
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
#### GO file
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
#### Merge immune genes table with BLAST table
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# Write table to file
write.table(immune_tab, file = paste0("../output/immune_genes/", transcriptomes[i], "/transcript_accession_IDs/all_indiv_libraries.txt"),
row.names = FALSE,
sep = "\t")
}
View(immune_tab)
i <- 1
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
View(immune_tab)
print("yes")
# One intermediate step - we want to create a file of the unique genes with names.
# This will only apply to cbai_v2.0, as it's the only one that had species and gene name built into the table
if("species" %in% colnames(immune_tab)) {
gene_names <- select(immune_tab, -Transcript_ID)
gene_names <- unique(gene_names)
}
View(gene_names)
gene_names <- select(immune_tab, -Transcript_ID)
View(gene_names)
View(immune_tab)
i <- 1
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# One intermediate step - we want to create a file of the unique genes with names.
# This will only apply to cbai_v2.0, as it's the only one that had species and gene name built into the table
if("species" %in% colnames(immune_tab)) {
gene_names <- select(immune_tab, -Transcript_ID)
gene_names <- unique(gene_names)
}
View(gene_names)
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
View(immune_tab)
#### GO file
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
#### Merge immune genes table with BLAST table
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# One intermediate step - we want to create a file of the unique genes with names.
# This will only apply to cbai_v2.0, as it's the only one that had species and gene name built into the table
if("species" %in% colnames(immune_tab)) {
gene_names <- select(immune_tab, -Transcript_ID)
gene_names <- unique(gene_names)
}
View(gene_names)
i <- 1
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
#### GO file
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
#### Merge immune genes table with BLAST table
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# One intermediate step - we want to create a file of the unique genes with names.
# This will only apply to cbai_v2.0, as it's the only one that had species and gene name built into the table
if("species" %in% colnames(immune_tab)) {
gene_names <- select(immune_tab, -Transcript_ID)
gene_names <- unique(gene_names)
}
View(immune_tab)
for (i in 1:length(blast_filepaths)) {
#### BLAST file
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
#### GO file
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
#### Merge immune genes table with BLAST table
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# One intermediate step - we want to create a file of the unique genes with names.
# This will only apply to cbai_v2.0, as it's the only one that had species and gene name built into the table
if("species" %in% colnames(immune_tab)) {
gene_names <- select(immune_tab, -Transcript_ID)
gene_names <- unique(gene_names)
# Drop the species and gene name column
immune_tab <- select(immune_tab, -"species")
# Write to file
write.table(gene_names, file = paste0("../output/immune_genes/", transcriptomes[i], "immune_gene_names.txt"),
row.names = FALSE,
sep = "\t")
}
# Write table to file
write.table(immune_tab, file = paste0("../output/immune_genes/", transcriptomes[i], "/transcript_accession_IDs/all_indiv_libraries.txt"),
row.names = FALSE,
sep = "\t")
}
for (i in 1:length(transcriptomes)) {
# Read in the file we created in the for loop
immune_tab <- read.table(file = paste0("../output/immune_genes/", transcriptomes[i], "/transcript_accession_IDs/all_indiv_libraries.txt"),
header = TRUE)
# Read in the TPM file containing info for all libraries. Note that check.names = FALSE - this is because
# the file has the 3-digit library IDs as column names.
TPM_tab <- read.table(file = paste0("../output/TPM_counts/", transcriptomes[i], "/all_indiv_library_TPMcts.txt"),
header = TRUE,
check.names = FALSE)
# Left join file of all immune tab files and our TPM file, so we're only left with TPMs for immune genes
immune_TPM <- left_join(immune_tab, TPM_tab, by = "Transcript_ID")
# Remove Accession ID column
immune_TPM <- select(immune_TPM, -Accession_ID)
# Write table to file
write.table(immune_TPM, file = paste0("../output/TPM_counts/", transcriptomes[i], "/immune_genes_all_libs_TPMcts.txt"),
row.names = FALSE,
sep = "\t")
}
# Paths to BLAST tables
blast_filepaths <- c("../data/cbai_diamond_blastx_table_transcriptomev2.0.txt",  # For cbai_transcriptomev2.0
"../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",     # For cbai_transcriptomev4.0
"../output/BLASTs/uniprot_swissprot/hemat1.6_blastxres.tab")    # For hemat_transcriptomev1.6
# Vector of our transcriptomes. Will be used in assembling file paths for GO files and our output files.
# Make sure these are in the same order as the above BLAST filepaths.
transcriptomes <- c("cbai_transcriptomev2.0", "cbai_transcriptomev4.0", "hemat_transcriptomev1.6")
# Previously, we used all GO terms that popped up when you search "immune" on amigo.geneontology.org
# To keep things simpler and more straightforward, we'll now just use the GO term for immune response, GO:0006955
immune_terms <- "GO:0006955"
# Create vector of all GO terms associated with immune response
# GO terms from amigo.geneontology.org
# immune_terms <- c("GO:0006955",    # Immune Response
#                  "GO:0006959",    # Humoral Immune Response
#                  "GO:1905036",    # Positive regulation of antifungal innate immune response
#                  "GO:1905035",    # Negative regulation of antifungal innate immune response
#                  "GO:1905675",    # Negative regulation of adaptive immune memory response
#                  "GO:1905674",    # Regulation of adaptive immune memory response
#                 "GO:1905679",    # Positive regulation of adaptive immune effector response
#                  "GO:1905678",    # Negative regulation of adaptive immune effector response
#                  "GO:1905677",    # Regulation of adaptive immune effector response
#                  "GO:1905676")    # Positive regulation of adaptive immune memory response
for (i in 1:length(blast_filepaths)) {
#### BLAST file
# Read in BLAST file
blast_tab <- read.delim(blast_filepaths[i], header = FALSE, sep = "\t")
# Columns have no names - add names for first two columns
colnames(blast_tab)[1:2] <- c("Transcript_ID", "Gene_ID")
# Remove all but the first two columns so we just have Transcript ID and Gene ID
blast_tab <- blast_tab %>%
select(Transcript_ID, Gene_ID)
# If pipes in Gene ID column, separate to get accession ID and remove unnecessary info
gene_ids <- dplyr::pull(blast_tab, Gene_ID)
if(any(grepl("|", gene_ids, fixed = TRUE))){
# Separate into different columns
blast_tab <- separate(data = blast_tab, col = Gene_ID,
into = c("sp", "Accession_ID", "species"),
sep = "\\|")
# Remove irrelevant "sp" column
blast_tab <- select(blast_tab, -sp)
# Otherwise, rename Gene ID to Accession ID so we know we got past this point
} else {
blast_tab <- blast_tab %>%
dplyr::rename(Accession_ID = Gene_ID)
}
#### GO file
# Read in GO terms file
go_tab <- read.delim(paste0("../output/accession_n_GOids/", transcriptomes[i], "/allgenes_IDs/all_indiv_libraries_All_GOIDs.txt"),
header = FALSE, sep = "\t", na.strings = c("", "NA"))
# Give columns names
colnames(go_tab) <- c("Accession_ID", "GO_terms")
# Remove lines without GO terms
go_tab <- na.omit(go_tab, cols = GO_terms)
# Search GO terms column for immune response genes
immune_genes <- go_tab[grep(paste(immune_terms, collapse = "|"),
go_tab$GO_terms), ]
#### Merge immune genes table with BLAST table
# Use left join to merge
immune_tab <- left_join(immune_genes, blast_tab, by = "Accession_ID")
# Remove GO terms column
immune_tab <- immune_tab %>%
select(-GO_terms)
# Reorder columns so Transcript ID is on left. This matches most other tables with Transcript ID
immune_tab <- immune_tab %>%
relocate(Transcript_ID)
# Remove duplicate transcript IDs
immune_tab <- unique(immune_tab)
# One intermediate step - we want to create a file of the unique genes with names.
# This will only apply to cbai_v2.0, as it's the only one that had species and gene name built into the table
if("species" %in% colnames(immune_tab)) {
gene_names <- select(immune_tab, -Transcript_ID)
gene_names <- unique(gene_names)
# Drop the species and gene name column
immune_tab <- select(immune_tab, -"species")
# Write to file
write.table(gene_names, file = paste0("../output/immune_genes/", transcriptomes[i], "/immune_gene_names.txt"),
row.names = FALSE,
sep = "\t")
}
# Write table to file
write.table(immune_tab, file = paste0("../output/immune_genes/", transcriptomes[i], "/transcript_accession_IDs/all_indiv_libraries.txt"),
row.names = FALSE,
sep = "\t")
}
