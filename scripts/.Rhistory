"day" = factor(c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6))),
"temp" = binarizeCategoricalVariable(x = c(rep("Ambient", times = 12),
rep("Lowered", times = 3),
rep("Elevated", times = 3),
rep("Ambient", times = 3),
rep("Lowered", times = 3)),
includePairwise = TRUE,
includeLevelVsAll = TRUE),
"infection" = c(rep(c(rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected",
rep("Infected", times = 3)), times = 2),
rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected"),
"hemat_level" = c(rep(c("L", "H", "H",
"H", "L", "L",
"L", "H", "H"),
times = 2),
"L", "H", "H",
"H", "L", "L"),
"CW" = scale(c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2), center = TRUE),
132.2, 128.8, 145,
127.4, 134.1, 133.3),
"SC" = c(rep("New", times = 5),
rep("Old", times = 2),
rep("New", times = 7),
rep("Old", times = 2),
rep("New", times = 7),
"Old"))
# If treating elevated day 0 and lowered day 0 as ambient
crabTraits <- data.frame("crab" = binarizeCategoricalVariable(x = c(rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I"), times = 2),
"A", "B", "C", "D", "E", "F"),
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 2),
"day" = factor(c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6))),
"temp" = binarizeCategoricalVariable(x = c(rep("Ambient", times = 12),
rep("Lowered", times = 3),
rep("Elevated", times = 3),
rep("Ambient", times = 3),
rep("Lowered", times = 3)),
includePairwise = TRUE,
includeLevelVsAll = TRUE),
"infection" = c(rep(c(rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected",
rep("Infected", times = 3)), times = 2),
rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected"),
"hemat_level" = c(rep(c("L", "H", "H",
"H", "L", "L",
"L", "H", "H"),
times = 2),
"L", "H", "H",
"H", "L", "L"),
"CW" = scale(c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2),
132.2, 128.8, 145,
127.4, 134.1, 133.3), center = TRUE),
"SC" = c(rep("New", times = 5),
rep("Old", times = 2),
rep("New", times = 7),
rep("Old", times = 2),
rep("New", times = 7),
"Old"))
View(crabTraits)
# If treating elevated day 0 as ambient
crabClinicalData <- data.frame("crab" = binarizeCategoricalVariable(x = c(rep(c(1, 2, 3, 4, 5, 6, 7, 8, 9), times = 2),
1, 2, 3, 4, 5, 6),
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 2),
"day" = c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6)),
"temp" = binarizeCategoricalVariable(x = c(rep(2, times = 12),
rep(1, times = 3),
rep(3, times = 3),
rep(2, times = 3),
rep(1, times = 3)),
includePairwise = TRUE,
includeLevelVsAll = TRUE),
"infection" = c(rep(c(rep(2, times = 3),
1, 2, 1,
rep(2, times = 3)), times = 2),
rep(2, times = 3),
1, 2, 1),
"hemat_level" = c(rep(c(1, 2, 2,
2, 1, 1,
1, 2, 1),
times = 2),
1, 2, 2,
1, 1, 1),
"CW" = scale(c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2),
132.2, 128.8, 145,
127.4, 134.1, 133.3), center = TRUE),
"SC" = c(rep(1, times = 5),
rep(2, times = 2),
rep(1, times = 7),
rep(2, times = 2),
rep(1, times = 7),
2))
View(crabClinicalData)
knitr::opts_chunk$set(echo = TRUE)
# For each row, crab and day should correspond to the order of libraries (ex: 4th row of crabTraits should match libraries[4])
crabTraits <- data.frame("crab" = binarizeCategoricalVariable(x = c(rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I"), times = 2),
"A", "B", "C", "D", "E", "F"),
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 2),
"day" = factor(c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6))),
"temp" = binarizeCategoricalVariable(x = c(rep("Ambient", times = 12),
rep("Lowered", times = 3),
rep("Elevated", times = 3),
rep("Ambient", times = 3),
rep("Lowered", times = 3)),
includePairwise = TRUE,
includeLevelVsAll = TRUE),
"infection" = c(rep(c(rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected",
rep("Infected", times = 3)), times = 2),
rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected"),
"hemat_level" = c(rep(c("L", "H", "H",
"H", "L", "L",
"L", "H", "H"),
times = 2),
"L", "H", "H",
"H", "L", "L"),
"CW" = scale(c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2),
132.2, 128.8, 145,
127.4, 134.1, 133.3), center = TRUE),
"SC" = c(rep("New", times = 5),
rep("Old", times = 2),
rep("New", times = 7),
rep("Old", times = 2),
rep("New", times = 7),
"Old"))
# Add all required libraries that are installed with install.packages() here
list.of.packages <- "tidyverse"
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("DESeq2", "WGCNA")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# For each row, crab and day should correspond to the order of libraries (ex: 4th row of crabTraits should match libraries[4])
crabTraits <- data.frame("crab" = binarizeCategoricalVariable(x = c(rep(c("A", "B", "C", "D", "E", "F", "G", "H", "I"), times = 2),
"A", "B", "C", "D", "E", "F"),
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 2),
"day" = factor(c(rep(0, times = 9),
rep(2, times = 9),
rep(17, times = 6))),
"temp" = binarizeCategoricalVariable(x = c(rep("Ambient", times = 12),
rep("Lowered", times = 3),
rep("Elevated", times = 3),
rep("Ambient", times = 3),
rep("Lowered", times = 3)),
includePairwise = TRUE,
includeLevelVsAll = TRUE),
"infection" = c(rep(c(rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected",
rep("Infected", times = 3)), times = 2),
rep("Infected", times = 3),
"Uninfected", "Infected", "Uninfected"),
"hemat_level" = c(rep(c("L", "H", "H",
"H", "L", "L",
"L", "H", "H"),
times = 2),
"L", "H", "H",
"H", "L", "L"),
"CW" = scale(c(rep(c(132.2, 128.8, 145,
127.4, 134.1, 133.3,
95.7, 111.8, 133.7),
times = 2),
132.2, 128.8, 145,
127.4, 134.1, 133.3), center = TRUE),
"SC" = c(rep("New", times = 5),
rep("Old", times = 2),
rep("New", times = 7),
rep("Old", times = 2),
rep("New", times = 7),
"Old"))
View(crabTraits)
knitr::opts_chunk$set(echo = TRUE)
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low_vs_low2_indiv",
variable = "Day")
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("tidyverse", "plotly")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("apeglm", "DESeq2", "vsn")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low_vs_low2_indiv",
variable = "Day")
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_vs_low2_indiv",
variable = "Day")
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_vs_low2_indiv",
variable = "Day")
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
kallisto_path <- "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_vs_low2_indiv/kallisto.isoform.counts.matrix"
experiment_table <-  exp_design
output_path <- "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_vs_low2_indiv"
variable <- "Day"
# Read in matrix created by Trinity from Kallisto outputs
data <- read.table(kallisto_path, header = TRUE,
sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
print(head(data))
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(experiment_table) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(experiment_table)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = experiment_table,
design = as.formula(paste0("~", variable)))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Shrink LFC estimates - used in shrunken MA plot
lfcnames <- resultsNames(deseq2.dds)
print(lfcnames[2])
resLFC <- lfcShrink(deseq2.dds, coef = lfcnames[2],
type = "apeglm")
# Look specifically at results w/ adjusted p-value < 0.05
deseq_res05 <- results(deseq2.dds, alpha = 0.05)
print("Number of DEGs (padj <= 0.05)")
print(sum(deseq_res05$padj < 0.05, na.rm = TRUE))
# Plot of full results, not shrunken
plotMA(deseq2.res, ylim = c(-28, 28))
dev.copy(png, file.path(output_path, "allres_MAplot.png"))
plotMA(deseq2.res, ylim = c(-28, 28))
dev.copy(png, file.path(output_path, "allres_MAplot.png"))
dev.off()
plotMA(resLFC, ylim = c(-2, 2), main = "apeglm")
dev.copy(png, file.path(output_path, "allres_shrunken_MAplot.png"))
dev.off()
plotMA(deseq_res05, ylim = c(-20, 20))
dev.copy(png, file.path(output_path, "res05_MAplot.png"))
dev.off()
deseq2_tmp <- deseq2.res
plot(deseq2_tmp$baseMean, deseq2_tmp$log2FoldChange, pch = 20,
cex = 0.45, ylim = c(-28, 28), log = "x", col = "darkgray",
main = paste("Differences by", variable, "(padj <= 0.005)"),
xlab = "mean of normalized counts",
ylab = "Log2 Fold Change")
# Get significant points, plot again so they're a diff color
deseq2_tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) &
deseq2.res$padj <= 0.005, ]
points(deseq2_tmp.sig$baseMean, deseq2_tmp.sig$log2FoldChange,
pch = 20, cex = 0.45, col = "red")
abline(h=c(-1,1), col = "blue")
dev.copy(png, file.path(output_path, "normalizedcts_v_log2foldchange.png"))
dev.off()
# Plot dispersion estimates
plotDispEsts(deseq2.dds)
dev.copy(png, file.path(output_path, "dispersion_estimates.png"))
dev.off()
# write all genes to table
write.table(deseq2_tmp, file.path(output_path, "AllGenes.txt"),
row.names = TRUE, col.names = FALSE,
quote = FALSE, sep = "\t")
write.table(deseq2_tmp, file.path(output_path, "AllGenes_wcols.txt"),
row.names = TRUE, col.names = TRUE,
quote = FALSE, sep = "\t")
# Write significant day-differing genes to table
write.table(deseq2_tmp.sig, file.path(output_path, "DEGlist.txt"),
row.names = TRUE, col.names = FALSE, quote = FALSE,
sep = "\t")
write.table(deseq2_tmp.sig, file.path(output_path, "DEGlist_wcols.txt"),
row.names = TRUE, col.names = TRUE, quote = FALSE,
sep = "\t")
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased"
"Decreased", "Decreased", "Decreased")),
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased")),
Day = factor(c(0, 0, 0,
2, 2, 2,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_vs_low217_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_vs_low217_indiv",
variable = "Temperature")
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased")),
Day = factor(c(0, 0, 0,
2, 2, 2,
17, 17, 17)))
kallisto_path <- "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_vs_low217_indiv/kallisto.isoform.counts.matrix"
experiment_table <-  exp_design
output_path <- "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_vs_low217_indiv"
variable <- "Temperature"
# Read in matrix created by Trinity from Kallisto outputs
data <- read.table(kallisto_path, header = TRUE,
sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
print(head(data))
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(experiment_table) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(experiment_table)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = experiment_table,
design = as.formula(paste0("~", variable)))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print("SUMMARY:")
print(summary(deseq2.res))
# Shrink LFC estimates - used in shrunken MA plot
lfcnames <- resultsNames(deseq2.dds)
print(lfcnames[2])
resLFC <- lfcShrink(deseq2.dds, coef = lfcnames[2],
type = "apeglm")
# Look specifically at results w/ adjusted p-value < 0.05
deseq_res05 <- results(deseq2.dds, alpha = 0.05)
# Look specifically at results w/ adjusted p-value < 0.05
deseq_res05 <- results(deseq2.dds, alpha = 0.05)
print("Number of DEGs (padj <= 0.05)")
print(sum(deseq_res05$padj < 0.05, na.rm = TRUE))
# Plot of full results, not shrunken
plotMA(deseq2.res, ylim = c(-28, 28))
dev.copy(png, file.path(output_path, "allres_MAplot.png"))
dev.off()
# Plot of full results, not shrunken
plotMA(deseq2.res, ylim = c(-28, 28))
dev.copy(png, file.path(output_path, "allres_MAplot.png"))
dev.off()
# Plot of full results, shrunken
plotMA(resLFC, ylim = c(-2, 2), main = "apeglm")
dev.copy(png, file.path(output_path, "allres_shrunken_MAplot.png"))
dev.off()
# Plot of res05 results, not shrunken
plotMA(deseq_res05, ylim = c(-20, 20))
dev.copy(png, file.path(output_path, "res05_MAplot.png"))
dev.off()
# Create a plot of Log2 fold change vs. normalized counts
deseq2_tmp <- deseq2.res
plot(deseq2_tmp$baseMean, deseq2_tmp$log2FoldChange, pch = 20,
cex = 0.45, ylim = c(-28, 28), log = "x", col = "darkgray",
main = paste("Differences by", variable, "(padj <= 0.005)"),
xlab = "mean of normalized counts",
ylab = "Log2 Fold Change")
# Get significant points, plot again so they're a diff color
deseq2_tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) &
deseq2.res$padj <= 0.005, ]
points(deseq2_tmp.sig$baseMean, deseq2_tmp.sig$log2FoldChange,
pch = 20, cex = 0.45, col = "red")
abline(h=c(-1,1), col = "blue")
dev.copy(png, file.path(output_path, "normalizedcts_v_log2foldchange.png"))
dev.off()
# Plot dispersion estimates
plotDispEsts(deseq2.dds)
dev.copy(png, file.path(output_path, "dispersion_estimates.png"))
dev.off()
# write all genes to table
write.table(deseq2_tmp, file.path(output_path, "AllGenes.txt"),
row.names = TRUE, col.names = FALSE,
quote = FALSE, sep = "\t")
write.table(deseq2_tmp, file.path(output_path, "AllGenes_wcols.txt"),
row.names = TRUE, col.names = TRUE,
quote = FALSE, sep = "\t")
# Write significant day-differing genes to table
write.table(deseq2_tmp.sig, file.path(output_path, "DEGlist.txt"),
row.names = TRUE, col.names = FALSE, quote = FALSE,
sep = "\t")
write.table(deseq2_tmp.sig, file.path(output_path, "DEGlist_wcols.txt"),
row.names = TRUE, col.names = TRUE, quote = FALSE,
sep = "\t")
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient"
"Ambient", "Ambient", "Ambient",
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased")),
Day = factor(c(0, 0, 0,
0, 0, 0
2, 2, 2,
exp_design <- data.frame(Temperature = factor(c("Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient",
"Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased")),
Day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
17, 17, 17,
2, 2, 2,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low0_amb0217_vs_low217_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low0_amb0217_vs_low217_indiv",
variable = "Temperature")
exp_design <- data.frame(Temperature = factor(c("Decreased", "Decreased", "Decreased",
"Decreased", "Decreased", "Decreased",
"Ambient", "Ambient", "Ambient",
"Ambient", "Ambient", "Ambient")),
Day = factor(c(2, 2, 2,
17, 17, 17,
2, 2, 2,
17, 17, 17)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/hemat_transcriptomev1.6/low217_vs_amb217_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/hemat_transcriptomev1.6/low217_vs_amb217_indiv",
variable = "Temperature")
knitr::opts_chunk$set(echo = TRUE)
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low_vs_low2_indiv",
variable = "Day")
exp_design <- data.frame(Day = factor(c(0, 0, 0,
2, 2, 2)))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/low0_vs_low2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/low0_vs_low2_indiv",
variable = "Day")
