file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv2.0_all_crabs_no_filter_yellow_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai2.0_all_crabs_no_filter_yellow_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv2.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev2.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv4.0_all_crabs_no_filter_brown_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_all_crabs_no_filter_brown_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbaiv4.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="cbaiv4.0_all_crabs_no_filter_black_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_all_crabs_no_filter_black_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
file_loc <- input %>%
str_remove("cbaiv4.0_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
# Edit these to match your data file names:
input="hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_all_crabs_no_filter_pink_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
knitr::opts_chunk$set(echo = TRUE)
exp_design <- data.frame(Temperature = factor(c("7.5C", "7.5C", "7.5C",
"10C", "10C", "10C")),
Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 2", "Day 2", "Day 2")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev2.0/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev2.0/elev0_vs_elev2_indiv",
variable = "Temperature")
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("tidyverse", "plotly")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("apeglm", "DESeq2", "vsn")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(Temperature = factor(c("7.5C", "7.5C", "7.5C",
"10C", "10C", "10C")),
Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 2", "Day 2", "Day 2")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev2.0/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev2.0/elev0_vs_elev2_indiv",
variable = "Temperature")
exp_design <- data.frame(Temperature = factor(c("7.5C", "7.5C", "7.5C",
"10C", "10C", "10C")),
Day = factor(c("Day 0", "Day 0", "Day 0",
"Day 2", "Day 2", "Day 2")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev2.0/elev0_vs_elev2_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev2.0/elev0_vs_elev2_indiv",
variable = "Day")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts/11_4_running_GOMWU")
file_loc <- input %>%
str_remove("hematv1.6_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/hemat_transcriptomev1.6/",
file_loc, "/")
library(ape)
library(tidyverse)
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("11_4_running_GO-MWU")
# Edit these to match your data file names:
input="hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_all_crabs_no_filter_pink_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
file_loc <- input %>%
str_remove("hematv1.6_") %>%
str_remove("_kMEs.csv")
filepath <- paste0("../../output/GO-MWU_output/WGCNA_modules/hemat_transcriptomev1.6/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
newfiles
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai2.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai2.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_hemat.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/hemat_transcriptomev1.6/all_crabs_no_filter_pink_module/MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv", sep="")
View(MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs)
MWU_BP_cbaiv4.0_all_crabs_no_filter_brown_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_brown_module/MWU_BP_cbaiv4.0_all_crabs_no_filter_brown_module_kMEs.csv", sep="")
View(MWU_BP_cbaiv4.0_all_crabs_no_filter_brown_module_kMEs)
MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_black_module/MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs.csv", sep="")
View(MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs)
MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/hemat_transcriptomev1.6/all_crabs_no_filter_pink_module/MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv", sep="")
View(MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts")
low_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/low0_vs_low2_indiv/DEGlist_wcols.txt")
View(low_adapt)
hi_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/elev0_vs_elev2_indiv/DEGlist_wcols.txt")
View(hi_adapt)
View(low_adapt)
View(low_adapt)
View(hi_adapt)
?inner_join
overlap <- inner_join(low_adapt, hi_adapt, by = row.names)
overlap <- inner_join(low_adapt, hi_adapt, by = "row.names")
low_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/low0_vs_low2_indiv/DEGlist_wcols.txt", row.names = FALSE)
?read.delim
low_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/low0_vs_low2_indiv/DEGlist_wcols.txt", header = FALSE)
View(low_adapt)
low_adapt <- read.csv(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/low0_vs_low2_indiv/DEGlist_wcols.txt", header = FALSE)
View(low_adapt)
low_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/low0_vs_low2_indiv/DEGlist_wcols.txt")
low_adapt <- rownames_to_column(low_adapt)
View(low_adapt)
?rownames_to_column
low_adapt <- rownames_to_column(low_adapt, var = "Transcript_ID")
View(low_adapt)
View(low_adapt)
low_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/low0_vs_low2_indiv/DEGlist_wcols.txt")
low_adapt <- rownames_to_column(low_adapt, var = "Transcript_ID")
View(low_adapt)
hi_adapt <- read.delim(file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/elev0_vs_elev2_indiv/DEGlist_wcols.txt")
hi_adapt <- rownames_to_column(hi_adapt, var = "Transcript_ID")
overlap <- inner_join(low_adapt, hi_adapt, by = "Transcript_ID")
View(overlap)
# Read in DEGs for low days 0 vs 2
low_adapt <- read.delim(file = "../output/accession_n_GOids/cbai_transcriptomev2.0/DEG_IDs/low0_vs_low2_indiv_All_GeneIDs.txt")
# Read in DEGs for low days 0 vs 2
low_adapt <- read.delim(file = "../output/accession_n_GOids/cbai_transcriptomev2.0/DEG_IDs/low0_vs_low2_indiv_DEG_IDs.txt")
View(low_adapt)
# Read in DEGs for low days 0 vs 2
low_adapt <- read.delim(file = "../output/accession_n_GOids/cbai_transcriptomev2.0/DEG_IDs/low0_vs_low2_indiv_DEG_IDs.txt",
header = FALSE,
row.names = "Accession_ID")
?read.delim
# Read in DEGs for low days 0 vs 2
low_adapt <- read.delim(file = "../output/accession_n_GOids/cbai_transcriptomev2.0/DEG_IDs/low0_vs_low2_indiv_DEG_IDs.txt",
header = FALSE,
col.names = "Accession_ID")
View(low_adapt)
hi_adapt <- read.delim(file = "../output/accession_n_GOids/cbai_transcriptomev2.0/DEG_IDs/elev0_vs_elev2_indiv_DEG_IDs.txt",
header = FALSE,
col.names = "Accession_ID")
overlap <- inner_join(low_adapt, hi_adapt, by = "Accession_ID")
View(hi_adapt)
blastx_table <- read.delim(file = "../data/blast_tables/hemat_transcriptomev1.6_blast_table.txt")
View(blastx_table)
View(blastx_table)
blastx_table <- read.delim(file = "../data/blast_tables/hemat_transcriptomev1.6_blast_table.txt",
header = FALSE,
col.names = "Transcript_ID", "Accession_ID")
blastx_table <- read.delim(file = "../data/blast_tables/hemat_transcriptomev1.6_blast_table.txt",
header = FALSE,
col.names = c("Transcript_ID", "Accession_ID"))
View(blastx_table)
blastx_table <- read.delim(file = "../data/blast_tables/hemat_transcriptomev1.6_blast_table.txt",
header = FALSE,
col.names = c("Transcript_ID", "Accession_ID", 1:10))
View(blastx_table)
!duplicated(blastx_table)
?duplicated
!unique(blastx_table)
unique(blastx_table)
unique(blastx_table$Transcript_ID)
sum(unique(blastx_table$Transcript_ID))
unique(blastx_table$Transcript_ID))
unique(blastx_table$Transcript_ID)
blastx_table %>%
group_by(Transcript_ID)
blastx_table %>%
group_by(Transcript_ID) %>%
filter(!duplicated(blastx_table))
filter(!duplicated(blastx_table))
blastx_table %>%
group_by(Transcript_ID) %>%
filter(!duplicated(blastx_table$Transcript_ID))
filter(!duplicated(blastx_table$Transcript_ID)
blastx_vals <- filter(!duplicated(blastx_table$Transcript_ID)
sum(!duplicated(blastx_table$Transcript_ID))
blastx_table <- read.delim(file = "../data/blast_tables/cbai_transcriptomev4.0_blast_table.txt",
header = FALSE,
col.names = c("Transcript_ID", "Accession_ID", 1:10))
sum(!duplicated(blastx_table$Transcript_ID))
blastx_table <- read.delim(file = "../data/blast_tables/cbai_transcriptomev2.0_blast_table.txt",
header = FALSE,
col.names = c("Transcript_ID", "Accession_ID", 1:10))
sum(!duplicated(blastx_table$Transcript_ID))
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("tidyverse", "plotly")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("apeglm", "DESeq2", "vsn")
# Install BiocManager if needed
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Functions are defined in hematodinium_analysis_functions.R
source("hematodinium_analysis_functions.R")
exp_design <- data.frame(Day = factor(c("Day 2", "Day 2", "Day 2",
"Day 17", "Day 17", "Day 17")))
deseq_analysis(kallisto_path = "../output/kallisto_matrices/cbai_transcriptomev4.0/amb0_vs_amb17_indiv/kallisto.isoform.counts.matrix",
experiment_table = exp_design,
output_path = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_amb17_indiv",
variable = "Day")
MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/cbai_transcriptomev4.0/amb0_vs_amb17_indiv/MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC.csv", sep="")
View(MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC)
# Ambient Day 2 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_amb17_indiv/DEGlist_wcols.txt",
blast_filepath = "../output/BLASTs/uniprot_swissprot/cbai4.0_blastxres.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/DEG_IDs/amb2_vs_amb17_indiv_DEG_IDs.txt")
# Ambient Day 0 vs. Ambient Day 17
transcripts_to_geneIDs(deseq_filepath = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_amb17_indiv/AllGenes_wcols.txt",
blast_filepath =  "../data/blast_tables/cbai_transcriptomev4.0_blast_table.txt",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/amb2_vs_amb17_indiv_All_GeneIDs.txt")
knitr::opts_chunk$set(echo = TRUE)
# Ambient Day 2 vs. Ambient Day 17. Individual libraries
uniprot_to_GO(accession_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/amb2_vs_amb17_indiv_All_GeneIDs.txt",
swissprot_path = "../data/all_uniprot_info_inc_GOterms.tab",
output_path = "../output/accession_n_GOids/cbai_transcriptomev4.0/allgenes_IDs/amb2_vs_amb17_indiv_All_GOIDs.txt")
knitr::opts_chunk$set(echo = TRUE)
# Ambient Day 2 vs. Ambient Day 17, indiv. libraries only
geneIDs_foldchange(input_file = "../graphs/DESeq2_output/cbai_transcriptomev4.0/amb2_vs_amb17_indiv/AllGenes_wcols.txt",
blast_file = "../data/blast_tables/cbai_transcriptomev4.0_blast_table.txt",
output_file = "../scripts/4_6_running_GO-MWU/cbai4.0_amb2_vs_amb17_indiv_l2FC.csv")
library(ape)
library(tidyverse)
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("4_6_running_GO-MWU")
# Edit these to match your data file names:
input="cbai4.0_amb2_vs_amb17_indiv_l2FC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="cbai4.0_amb2_vs_amb17_indiv_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
file_loc <- input %>%
str_remove("cbai4.0_") %>%
str_remove("_l2FC.csv")
filepath <- paste0("../../output/GO-MWU_output/cbai_transcriptomev4.0/",
file_loc, "/")
# We're encountering some issues with a double-named filename (something like "dissim_BP_cbai4.0_amb0217_elev0_low0_vs_elev2_l2FC.csv_cbai4.0_amb0217_elev0_low0_vs_elev2_GOIDs_norepeats.txt")
# It's a problem with the function, but I don't want to touch the prebuilt GO-MWU stuff,
# so I'm just going to remove part of the name
files <- list.files(getwd(), pattern = "BP_")
newfiles <- gsub("\\.csv_cbai.*", ".txt", files)
file.rename(files, newfiles)
file.copy(list.files(getwd(), pattern = "BP_"), filepath)
file.remove(list.files(getwd(), pattern = "BP_"))
MWU_BP_hemat1.6_amb0_vs_amb17_indiv_l2FC <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/hemat_transcriptomev1.6/amb0_vs_amb17_indiv/MWU_BP_hemat1.6_amb0_vs_amb17_indiv_l2FC.csv", sep="")
View(MWU_BP_hemat1.6_amb0_vs_amb17_indiv_l2FC)
MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_black_module/MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs.csv", sep="")
View(MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs)
MWU_BP_cbaiv4.0_all_crabs_no_filter_brown_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_brown_module/MWU_BP_cbaiv4.0_all_crabs_no_filter_brown_module_kMEs.csv", sep="")
View(MWU_BP_cbaiv4.0_all_crabs_no_filter_brown_module_kMEs)
load("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/cbai_transcriptomev4.0/amb0_vs_amb17_indiv/MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC.csv")
MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/cbai_transcriptomev4.0/amb0_vs_amb17_indiv/MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC.csv", sep="")
View(MWU_BP_cbai4.0_amb0_vs_amb17_indiv_l2FC)
MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/cbai_transcriptomev4.0/all_crabs_no_filter_black_module/MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs.csv", sep="")
View(MWU_BP_cbaiv4.0_all_crabs_no_filter_black_module_kMEs)
MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs <- read.csv("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/output/GO-MWU_output/WGCNA_modules/hemat_transcriptomev1.6/all_crabs_no_filter_pink_module/MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv", sep="")
View(MWU_BP_hematv1.6_all_crabs_no_filter_pink_module_kMEs)
library(ape)
library(tidyverse)
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("11_4_running_GO-MWU")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts")
library(ape)
library(tidyverse)
# I know, I know - suboptimal to have setwd().
# I assume that all scripts start from within your scripts directory,
# so this just indicates that you need to move to the same subdirectory
# as all other GO-MWU files - both data files and analysis files.
# GO-MWU doesn't cooperate otherwise.
setwd("11_4_running_GO-MWU")
setwd("C:/Users/acoyl/Documents/GitHub/hemat_bairdi_transcriptome/scripts/11_4_running_GOMWU")
library(ape)
library(tidyverse)
# Edit these to match your data file names:
input="hematv1.6_all_crabs_no_filter_pink_module_kMEs.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="hemat1.6_all_crabs_no_filter_pink_module_GOIDs_norepeats.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# text representation of results, with actual adjusted p-values
results[[1]]
results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="C:/Users/acoyl/Documents/GradSchool/RobertsLab/Tools/perl/bin/perl.exe", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
grDevices::windows()
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=0.05,  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=0.001, # un-remark this if you are using log2-fold changes
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# manually rescale the plot so the tree matches the text
# if there
# text representation of results, with actual adjusted p-values
results[[1]]
