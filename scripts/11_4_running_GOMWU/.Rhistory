"H", "L", "L",
"L", "H", "H",
"H", "H", "L",
"L", "H", "L",
"L", "H", "H")),
infection = factor(c("inf", "uninf", "uninf",
"inf", "inf", "inf",
"inf", "inf", "inf",
"uninf", "uninf", "inf",
"inf", "inf", "inf",
"inf", "inf", "inf",
"uninf", "uninf", "inf",
"inf", "inf", "inf")))
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
for (i in 1:length(variables)) {
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev2.0/immune_genes_indiv_libraries/manual_cts_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
# Plot plotly for PCA
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev2.0/immune_genes_all_libs/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev2.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
dev.off()
}
# Now that we're outside the for loop, we can calculate the centroid of the PCA for each crab to get an idea of the plasticity. To do this, we'll take the mean distance between each library and the centroid.
# Run PCA to create object. This uses the same code found in plotPCA()
rv <- rowVars(assay(vsd))
select <- order(rv, decreasing = TRUE)[seq_len(min(500,
length(rv)))]
pca <- prcomp(t(assay(vsd)[select, ]))
# Find the points of each PCA
points <- pca[["x"]]
# Change rownames from sample ID to crab ID
rownames(points) <- exp_design$crab
# Eliminate all columns except PC1 and PC2
points <- points[,1:2]
# Get list of all rownames used (should be all unique crab IDs)
crabs <- unique(rownames(points))
# Initialize a blank dataframe
means <- data.frame(crabs, rep(NA, times = length(crabs)), rep(NA, times = length(crabs)), rep(NA, times = length(crabs)))
# Rename the columns of the blank dataframe
colnames(means) <- c("crabID", "PC1_mean", "PC2_mean", "mean_dist_from_centroid")
for (i in 1:length(crabs)) {
# Get values that match that particular crab
crab_pts <- points[rownames(points) == crabs[i], ]
# Get mean of each column. This is the coordinates of the centroid
means[i, 2] <- mean(crab_pts[, 1])
means[i, 3] <- mean(crab_pts[, 2])
# Initialize blank vector that's the same length as the number of values that match the crab in question
dist_vec <- rep(NA, length = nrow(crab_pts))
for (j in 1:nrow(crab_pts)) {
# Calculate the Euclidean distance from each point to the centroid, use to fill the blank vector
dist_vec[j] <- sqrt((crab_pts[j,1] - means[i, 2])^2 + (crab_pts[j,2] - means[i, 3])^2)
}
# Take the mean of the Euclidean distances and put that in Column 4 of the means table
means[i,4] <- mean(dist_vec)
}
# Remove the middle 2 columns, since we really just want mean distance in the final table
means <- select(means, -c(PC1_mean, PC2_mean))
write.table(means, file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/immune_genes_all_libs/PCA_plasticity.txt", row.names = FALSE)
exp_design <- data.frame(crab = factor(c("H", "B", "I",
"C", "G", "A",
"G", "I", "H",
"C", "B", "A")),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",
"elev", "elev","elev",
"amb", "amb", "amb")),
day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
2, 2, 2)),
hemat_level = factor(c("H", "H", "H",
"H", "L", "L",
"L", "H", "H",
"H", "H", "L")))
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
variables
i <- 1
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev2.0/immune_genes_indiv_libraries/elev02_amb02_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev2.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev2.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal()
# Create experimental table. Order should correspond to order of columns in our data file
# In creating our initial data file, the easiest way to read the kallisto files was by pulling libraries in numeric order.
# Therefore, the order of both should be as follows:
# 072, 118, 127, 132, 173, 178, 272, 280, 294, 334, 349, 359
exp_design <- data.frame(crab = factor(c("H", "B", "I",
"C", "G", "A",
"G", "I", "H",
"C", "B", "A")),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",
"elev", "elev","elev",
"amb", "amb", "amb")),
day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
2, 2, 2)),
hemat_level = factor(c("H", "H", "H",
"H", "L", "L",
"L", "H", "H",
"H", "H", "L")))
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
for (i in 1:length(variables)) {
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev2.0/immune_genes_indiv_libraries/elev02_amb02_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
# Plot plotly for PCA
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev2.0/immune_genes_elev02_amb02/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev2.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
dev.off()
}
# Now that we're outside the for loop, we can calculate the centroid of the PCA for each crab to get an idea of the plasticity. To do this, we'll take the mean distance between each library and the centroid.
# Run PCA to create object. This uses the same code found in plotPCA()
rv <- rowVars(assay(vsd))
select <- order(rv, decreasing = TRUE)[seq_len(min(500,
length(rv)))]
pca <- prcomp(t(assay(vsd)[select, ]))
# Find the points of each PCA
points <- pca[["x"]]
# Change rownames from sample ID to crab ID
rownames(points) <- exp_design$crab
# Eliminate all columns except PC1 and PC2
points <- points[,1:2]
# Get list of all rownames used (should be all unique crab IDs)
crabs <- unique(rownames(points))
# Initialize a blank dataframe
means <- data.frame(crabs, rep(NA, times = length(crabs)), rep(NA, times = length(crabs)), rep(NA, times = length(crabs)))
# Rename the columns of the blank dataframe
colnames(means) <- c("crabID", "PC1_mean", "PC2_mean", "mean_dist_from_centroid")
for (i in 1:length(crabs)) {
# Get values that match that particular crab
crab_pts <- points[rownames(points) == crabs[i], ]
# Get mean of each column. This is the coordinates of the centroid
means[i, 2] <- mean(crab_pts[, 1])
means[i, 3] <- mean(crab_pts[, 2])
# Initialize blank vector that's the same length as the number of values that match the crab in question
dist_vec <- rep(NA, length = nrow(crab_pts))
for (j in 1:nrow(crab_pts)) {
# Calculate the Euclidean distance from each point to the centroid, use to fill the blank vector
dist_vec[j] <- sqrt((crab_pts[j,1] - means[i, 2])^2 + (crab_pts[j,2] - means[i, 3])^2)
}
# Take the mean of the Euclidean distances and put that in Column 4 of the means table
means[i,4] <- mean(dist_vec)
}
# Remove the middle 2 columns, since we really just want mean distance in the final table
means <- select(means, -c(PC1_mean, PC2_mean))
write.table(means, file = "../graphs/DESeq2_output/cbai_transcriptomev2.0/immune_genes_elev02_amb02/PCA_plasticity.txt", row.names = FALSE)
# Create experimental table. Order should correspond to order of columns in our data file
# In creating our initial data file, the easiest way to read the kallisto files was by pulling libraries in numeric order.
# Therefore, the order of both should be as follows:
# 072, 118, 127, 132, 173, 178, 272, 280, 294, 334, 349, 359
exp_design <- data.frame(crab = factor(c("H", "B", "I",
"C", "G", "A",
"G", "I", "H",
"C", "B", "A")),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",
"elev", "elev","elev",
"amb", "amb", "amb")),
day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
2, 2, 2)),
hemat_level = factor(c("H", "H", "H",
"H", "L", "L",
"L", "H", "H",
"H", "H", "L")))
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
for (i in 1:length(variables)) {
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev4.0/immune_genes_indiv_libraries/manual_cts_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
# Plot plotly for PCA
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev4.0/immune_genes_elev02_amb02/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev4.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
dev.off()
}
i <- 1
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
variables
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Create experimental table. Order should correspond to order of columns in our data file
# In creating our initial data file, the easiest way to read the kallisto files was by pulling libraries in numeric order.
# Therefore, the order of both should be as follows:
# 072, 118, 127, 132, 173, 178, 272, 280, 294, 334, 349, 359
exp_design <- data.frame(crab = factor(c("H", "B", "I",
"C", "G", "A",
"G", "I", "H",
"C", "B", "A")),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",
"elev", "elev","elev",
"amb", "amb", "amb")),
day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
2, 2, 2)),
hemat_level = factor(c("H", "H", "H",
"H", "L", "L",
"L", "H", "H",
"H", "H", "L")))
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
for (i in 1:length(variables)) {
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev4.0/immune_genes_indiv_libraries/elev02_amb02_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
# Plot plotly for PCA
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev4.0/immune_genes_elev02_amb02/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev4.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
dev.off()
}
i <- 1
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev4.0/immune_genes_indiv_libraries/elev02_amb02_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
# Plot plotly for PCA
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev4.0/immune_genes_elev02_amb02/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev4.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev4.0/immune_genes_elev02_amb02/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev4.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
dev.off()
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
# Create experimental table. Order should correspond to order of columns in our data file
# In creating our initial data file, the easiest way to read the kallisto files was by pulling libraries in numeric order.
# Therefore, the order of both should be as follows:
# 072, 118, 127, 132, 173, 178, 272, 280, 294, 334, 349, 359
exp_design <- data.frame(crab = factor(c("H", "B", "I",
"C", "G", "A",
"G", "I", "H",
"C", "B", "A")),
temp = factor(c("amb", "amb", "amb",
"amb", "amb", "amb",
"elev", "elev","elev",
"amb", "amb", "amb")),
day = factor(c(0, 0, 0,
0, 0, 0,
2, 2, 2,
2, 2, 2)),
hemat_level = factor(c("H", "H", "H",
"H", "L", "L",
"L", "H", "H",
"H", "H", "L")))
# Get the names of each column in the exp_design table
variables <- colnames(exp_design)
for (i in 1:length(variables)) {
# Select a variable from exp_design to show in your PCA
var_name <- variables[i]
# Read in data
data <- read.table("../output/kallisto_matrices/cbai_transcriptomev4.0/immune_genes_indiv_libraries/elev02_amb02_matrix.txt", header = TRUE, sep = "\t")
# Rename first column
names(data)[1] <- "target_ID"
# Set row names equal to the first column
rownames(data) <- data$target_ID
# Remove the now-irrelevant first column
data <- data[,-1]
# Make sure everything looks okay
print("HEAD")
head(data)
print("STRUCTURE")
print(str(data))
# Round counts to integers - needed for DESeqDataSetFromMatrix()
data <- round(data, digits = 0)
# Rename rows to correspond to library numbers
rownames(exp_design) <- colnames(data)
# Check that experiment_table appears to match columns with matrix from Trinity
print("EXPERIMENTAL DESIGN")
print(exp_design)
# Create DESeq object that looks at effect of variable
deseq2.dds <- DESeqDataSetFromMatrix(countData = (data),
colData = exp_design,
design = as.formula("~temp"))
deseq2.dds <- DESeq(deseq2.dds)
#Look at results
deseq2.res <- results(deseq2.dds)
print("SUMMARY:")
print(summary(deseq2.res))
# Transform values for PCA plot
vsd <- varianceStabilizingTransformation(deseq2.dds, blind = FALSE)
colData(vsd)
# Plot plotly for PCA
png(paste0("../graphs/DESeq2_output/cbai_transcriptomev4.0/immune_genes_elev02_amb02/",
var_name, "_as_var.png"))
print(plotPCA(vsd, intgroup= var_name) +
ggtitle("PCA of all crabs for cbai_transcriptomev4.0") +
geom_point(size = 3, aes(text = colnames(vsd))) +
theme_minimal())
dev.off()
}
